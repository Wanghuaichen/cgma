#!/bin/csh

# This is a script to build cgm for different sierra platforms.
# The script will a.) run make clean_all and  b.) build the cgm libraries.
#
# Usage: ./build-cgm [ss5|sg|janus|ibm|da|lin] [opt|dbg]
#
# The MACHINE_TYPE variable must be set for this script to work.
#  Value Of             Sierra 
#  MACHINE_TYPE         make include file    uname
#  --------------       ------------------   ------
#  ss5                  sierra.<opt>.ss5     SunOS
#  sg                   sierra.<opt>.sg      IRIX64
#  janus                sierra.<opt>.janus   TFLOPS
#  ibm                  sierra.<opt>.ibm     AIX
#  da                   sierra.<opt>.da      OSF1
#  lin			sierra.<opt>.lin     Linux

#
# This script can build either the optimized or debug versions
# of the cgm libraries.  The choice of which to build can be
# specified on the command line by either "opt" or "dbg". If
# neither is specified, the script will prompt for one.


# Valid values for MACHINE_TYPE
set MACHINE_LIST = (ss sg hp ibm lin da janus)

# Usage description
set USAGE = "Usage: build-cgm [<MACHINE_TYPE>] {opt|dbg}"

# If more than one argument
if ( $#argv > 1 ) then
	set MACHINE_TYPE=$1
	shift
endif

# MACHINE_TYPE must be defined.
if ( ! $?MACHINE_TYPE ) then
        switch( `uname` )
                case SunOS:
                        set MACHINE_TYPE=ss
                        breaksw
                case IRIX:
                case IRIX64:
                        set MACHINE_TYPE=sg
                        breaksw
                case HP-UX:
                        set MACHINE_TYPE=hp
                        breaksw
                case AIX:
                        set MACHINE_TYPE=ibm
                        breaksw
                case Linux:
                case LINUX:
                        set MACHINE_TYPE=lin
                        breaksw
                case OSF1:
                        set MACHINE_TYPE=da
                        breaksw
                default:
                        echo "MACHINE_TYPE is not defined or specified."
                        echo "Cannot continue."
                        echo "$USAGE"
                        exit 1
        endsw
        echo "MACHINE_TYPE was not defined or specified as an argument."
        echo "Auto-selected MACHINE_TYPE=${MACHINE_TYPE} for uname=`uname`"
endif

# Change ss5 to ss.
if( "$MACHINE_TYPE" == "ss5" ) then
        echo "MACHINE_TYPE of 'ss5' is depricated.  Use 'ss'."
        set MACHINE_TYPE="ss"
endif

# Make sure MACHINE_TYPE is valid
foreach machine ( $MACHINE_LIST )
        if( "$machine" == "$MACHINE_TYPE" ) then
                set MACHINE_TYPE_OKAY
        endif
end
if( ! $?MACHINE_TYPE_OKAY ) then
        echo "$USAGE"
        echo "'$MACHINE_TYPE' is not a valid value for MACHINE_TYPE"
        echo "Valid options are: $MACHINE_LIST"
        exit 2
endif


# Figure out where the cubit base directory is
set PWD=`pwd`
cd `dirname $0`
set MYDIR=`pwd`
cd $PWD

if( -f util/OtherFiles/CUBIT.$MACHINE_TYPE ) then
        set BASE_DIR = $PWD
else if( -f ${MYDIR}/util/OtherFiles/CUBIT.$MACHINE_TYPE ) then
        set BASE_DIR = $MYDIR
else if( -f ${MYDIR}/CUBIT.$MACHINE_TYPE ) then
        cd $MYDIR
        cd ../..
        set BASE_DIR = `pwd`
        cd $PWD
else
        echo Cannot find CUBIT.$MACHINE_TYPE in
        echo "  ${PWD}/util/OtherFiles/"
        echo "  ${MYDIR}/util/OtherFiles/"
        echo "  ${MYDIR}/"
        exit 2
endif


# If no argument was give on the command line, prompt
# for the type of library to build.
if ( $#argv > 0 ) then
	set choice = "$1"
else
	echo "1. optimized"
	echo "2. debug"
	echo -n "> "
	set choice = $<
endif

# Set options for the type of library to be built
switch ( "$choice" )
	case d:
	case dbg:
	case debug:
	case libdebug:
	case 2:
		set mf = dbg
		breaksw
	case o:
	case opt:
	case optimized:
	case lib:
	case 1:
		set mf = opt
		breaksw
	default:
		echo "Unrecognized option '$choice'.  Expected 'dbg' or 'opt'."
		echo "$USAGE"
                exit 2
endsw



# Symlink .cubit.myown to the appropriate makefile include 
set PWD=`pwd`
set myfile = sierra.${mf}.${MACHINE_TYPE}
set other_dir = ${BASE_DIR}/util/OtherFiles
if( ! -f ${other_dir}/$myfile ) then
        echo "File ${other_dir}/$myfile"
        echo "does not exist.  Cannot continue."
        exit 2
endif

cd $other_dir
rm -f cubit.myown
ln -s $myfile cubit.myown
if( $status ) then
	echo "Cannot access ${BASE_DIR}/util/OtherFiles/sierra.${mf}.${MACHINE_TYPE}"
	exit 4
endif
cd ${BASE_DIR}

# Create make.dependencies files before invoking make
touch make.dependencies
touch geom/make.dependencies
touch util/make.dependencies
touch geom/facet/make.dependencies
touch geom/ACIS/make.dependencies
touch geom/virtual/make.dependencies
touch geom/facetbool/make.dependencies


# Define options for make command
set MAKE_EXE = make
set MAKE_OPTS = "MACHINE_TYPE=${MACHINE_TYPE} CUBIT_BASE_DIR=${BASE_DIR}"
set MAKE = "$MAKE_EXE $MAKE_OPTS"

# Run make clean_all.
cd util 
$MAKE clean_all
cd ../geom 
$MAKE clean_all
cd ..
if( $status ) then
	echo "make clean_all failed!!!"
	exit 6
endif

# Build libcubit_util.a
cd util
$MAKE libcubit_util.a
if( $status ) then
	echo "Build of libcubit_util.a failed."
	exit 5
endif

# Build libcubit_geom.a, libcubit_virtual.a, and any other
# geometry modules specified in the make file (probably
# libcubit_facet.a)
cd ../geom
$MAKE
if( $status ) then 
	echo "Build of libcubit_geom.a failed."
	exit 5
endif 

# Build facet boolean libraries
cd facetbool
$MAKE
if( $status ) then
	echo "Build of facet boolean lib(s) failed."
	exit 5
endif

